// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=alutomux, sel=instruction[15], out=muxtoa);

    Not(in=instruction[15], out=not15);
    Or(a=not15, b=instruction[5], out=loada); // load A reg if i[15]==0 or i[5]==1
    ARegister(in=muxtoa, load=loada, out=aoutmux, out[0..14]=addressM, out=aoutpc);

    And(a=instruction[15], b=instruction[3], out=writeM); // writeM=1 if i[15] and i[3]==1

    And(a=instruction[15], b=instruction[4], out=loadd); // load D reg only if i[15] and i[4]==1
    DRegister(in=alutod, load=loadd, out=alux);

    Mux16(a=aoutmux, b=inM, sel=instruction[12], out=aluy);
    ALU(x=alux, y=aluy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=alutomux, out=alutod, out=outM, zr=zr, ng=ng);

    And(a=zr, b=instruction[1], out=equal0); // output equal to 0?
    And(a=ng, b=instruction[2], out=less0); // output less than 0?
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=notzrng);
    And(a=notzrng, b=instruction[0], out=greater0); // output greater than 0?
    And(a=instruction[0], b=instruction[1], out=jump01);
    And(a=jump01, b=instruction[2], out=jump012); // all jump bits 1?
    Or(a=equal0, b=less0, out=equalless0);
    Or(a=greater0, b=jump012, out=greater0jump012);
    Or(a=equalless0, b=greater0jump012, out=alljumpbits);
    And(a=alljumpbits, b=instruction[15], out=jump); // all jump checks including if i[15]==1
    Not(in=jump, out=notjump); // if not jump increment

    PC(in=aoutpc, load=jump, inc=notjump, reset=reset, out[0..14]=pc);
}
